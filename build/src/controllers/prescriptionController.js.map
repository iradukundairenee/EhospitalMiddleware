{"version":3,"file":"prescriptionController.js","names":["_catchAsync","require","prescriptions","id","patientName","doctorName","medication","dosage","frequency","startDate","endDate","convertToCSV","data","headers","Object","keys","rows","map","item","values","join","getAllPrescriptions","req","res","json","exports","getPrescriptionById","params","prescription","find","p","parseInt","status","message","createPrescription","send","downloadPrescription","catchAsync","csv","setHeader","set"],"sources":["../../../src/controllers/prescriptionController.js"],"sourcesContent":["import { catchAsync } from \"../utils/catchAsync\";\n\n// Define prescription data\nconst prescriptions = [\n  {\n    id: 1,\n    patientName: \"John Doe\",\n    doctorName: \"Dr. Smith\",\n    medication: \"Ibuprofen\",\n    dosage: \"200mg\",\n    frequency: \"3 times a day\",\n    startDate: \"2022-01-01\",\n    endDate: \"2022-02-01\",\n  },\n  {\n    id: 2,\n    patientName: \"Jane Smith\",\n    doctorName: \"Dr. Johnson\",\n    medication: \"Acetaminophen\",\n    dosage: \"500mg\",\n    frequency: \"once a day\",\n    startDate: \"2022-03-01\",\n    endDate: \"2022-03-31\",\n  },\n];\n\n// Function to convert data to CSV format\nconst convertToCSV = (data) => {\n  const headers = Object.keys(data[0]);\n  const rows = data.map((item) => Object.values(item).join(\",\"));\n  return [headers.join(\",\"), ...rows].join(\"\\n\");\n};\n\n// Controller function to get all prescriptions\nexport const getAllPrescriptions = (req, res) => {\n  res.json(prescriptions);\n};\n\n// Controller function to get a prescription by ID\nexport const getPrescriptionById = (req, res) => {\n  const { id } = req.params;\n  const prescription = prescriptions.find((p) => p.id === parseInt(id));\n  if (!prescription) {\n    return res.status(404).json({\n      status: \"fail\",\n      message: \"Prescription not found\",\n    });\n  }\n  res.json(prescription);\n};\n\n// Controller function to create a new prescription\nexport const createPrescription = (req, res) => {\n  // TODO: Implement the logic to create a new prescription\n  res.send(\"Not implemented yet\");\n};\n\n// Controller function to download a prescription\nexport const downloadPrescription = catchAsync(async (req, res) => {\n  const { id } = req.params;\n  const prescription = prescriptions.find((p) => p.id === parseInt(id));\n  if (!prescription) {\n    return res.status(404).json({\n      status: \"fail\",\n      message: \"Prescription not found\",\n    });\n  }\n  // Convert prescription to CSV format\n  const csv = convertToCSV([prescription]);\n\n  // Set headers for file download\n  res.setHeader(\"Content-disposition\", \"attachment; filename=prescription.csv\");\n  res.set(\"Content-Type\", \"text/csv\");\n\n  // Send the CSV file as response\n  res.status(200).send(csv);\n});\n"],"mappings":"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"}